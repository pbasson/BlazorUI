@page "/Weather"
@using Blazor.UI.Models
@using Blazor.UI.Components.PageComponents
@using Blazor.UI.Services
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<button class="btn btn-primary btn-space" @onclick="@( () => NavigateTo() )"  ><i class="bi bi-arrow-90deg-left"></i> Back To Home  </button>

@if (DataSource.Loading)
{
    <LoadingComponent />
}
else
{
    <button class="btn btn-primary btn-space" @onclick="LoadData"><i class="bi bi-arrow-right"></i> Load More</button>
    <button class="btn btn-primary btn-space" @onclick="@( () => DataSource.ResetData() )"><i class="bi bi-arrow-clockwise"></i> Reset</button>

    <WeatherGrid DataSource="@DataSource.WeatherList" />
}

@code {
    [Inject] NavigationManager _navManager { get; set; } = default!;
    [Inject] WeatherServices _services { get; set; } = default!;
    private WeatherPageVM DataSource { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        DataSource.WeatherList = await _services.GetWeatherForecastAsync(DataSource.WeatherList);
        if(DataSource != null && DataSource.WeatherList != null && DataSource.WeatherList.Any() )
        {
            DataSource.UnsetLoading();
        }
    }

    void NavigateTo()
    {
        _navManager.NavigateTo("/"); 
    }
}