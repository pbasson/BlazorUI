@using Blazor.Core.Helpers
@using Blazor.Core.Models.Entities
@using Blazor.Core.Models.Settings
@using System.Data
@using System.ComponentModel.DataAnnotations
@using Blazor.UI.Services
@using Radzen.Blazor.Rendering
@inject DialogService DialogService
@rendermode InteractiveServer
<RadzenComponents  />
<RadzenDialog />

@if(DataSet != null && DataSet.Any() ) { 
    
    <RadzenDataGrid Data="@DataSet" TItem="CRUDTransactionDTO"
            AllowColumnResize="true" 
            AllowAlternatingRows="false" 
            AllowSorting="true" Count="@DataSet.Count()"
            PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
            AllowPaging="true" PageSize="5" 
            ColumnWidth="200px" 
            >
            <HeaderTemplate>
                <RadzenStack>
                    <RadzenButton  Text="Add" Click="AddRecord"> <i class="bi bi-plus-circle">Add</i> </RadzenButton>
                </RadzenStack>
            </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn TItem="CRUDTransactionDTO" Property="Id" Title="Id" Width="50px" />
            <RadzenDataGridColumn TItem="CRUDTransactionDTO" Property="Name" Title="Name"   />
            <RadzenDataGridColumn Frozen="true" Width="180px">
                <Template>
                    @{
                        var dataContext = context.Id; 
                        <RadzenButton Click="@( args => EditRecord( args, context) )"> <i class="bi bi-pencil-square">Edit</i> </RadzenButton>
                        <RadzenButton Text="Confirm dialog" ButtonStyle="ButtonStyle.Secondary" Click=@( args => ConfirmButton( args, dataContext) ) > 
                            <i class="bi bi-x-lg">Delete</i> </RadzenButton>
                    }
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>

} else  {
    <p>No DataSet is Available</p>
}

@code {
    [Parameter] public List<CRUDTransactionDTO>? DataSet {get; set;}
    [Inject] TransactionService service {get; set;} = default!;

    private async Task AddRecord(MouseEventArgs args) {
        await DialogService.OpenAsync<TransactionDialog>( "Add", new Dictionary<string, object> { { "Data", new CRUDTransactionDTO() } }, SetOption() );   

        DataSet = await service.GetAllRecordsAsync();
    }

    private async Task EditRecord(MouseEventArgs args, CRUDTransactionDTO dTO) {
        await DialogService.OpenAsync<TransactionDialog>( "Edit", new Dictionary<string, object> { { "Data", dTO } }, SetOption() );        

        DataSet = await service.GetAllRecordsAsync();
    }

    private async Task ConfirmButton(MouseEventArgs args, int id) {
        var getConfirm = await DialogService.Confirm($"{PageStatics.ConfirmDelete}", "MyTitle", 
                            new ConfirmOptions() { OkButtonText = $"{PageStatics.ConfirmYes}", CancelButtonText = $"{PageStatics.ConfirmCancel}" });

        if(getConfirm != null && (bool)getConfirm) {
            await service.DeleteRecordAsync(id); 
            DataSet = await service.GetAllRecordsAsync();
        }
    }

    DialogOptions SetOption() {
        return new DialogOptions {
            Width = "700px", 
            Height = "512px",
        };
    }
}    
