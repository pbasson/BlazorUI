@page "/Transaction"
@using Blazor.Core.Models.Entities
@using Blazor.Core.Models.Settings
@using Blazor.UI.Components.PageComponents
@using Blazor.UI.Components.TransactionComponents
@using Blazor.UI.Services
@attribute [StreamRendering]
@rendermode InteractiveServer

<h2>Transaction Page</h2>

<NavigateHome />

@if (DataSource.Loading)
{
    <LoadingComponent />
}
else
{
    
    <TransactionGrid DataSet="@DataSource.DataSet"/>
    <br />

    @* <TransactionRecord DataSet="@DataSource.DataRecord" /> *@
}


@code {
    [Inject] TransactionService _services { get; set; } = default!;

    private TransactionSettings DataSource { get; set; } = new();
    private int randomInt = 0;
    private bool CheckIdInList(int id) 
    {
        return !DataSource.DataSet.Select(x => x.Id).Contains(id) ;
    }

    private int GetRandomId() {
        return Random.Shared.Next(1, DataSource.DataSet.Count()); 
    }
    private int GetRandomValue(int num) {
        return Random.Shared.Next(num); 
    }


    private void SetRandomId() {
        do {
            randomInt = GetRandomId();
        } while (CheckIdInList(randomInt) );  
    }

    protected override async Task OnInitializedAsync() {

        DataSource.DataSet = await _services.GetAllRecordsAsync();
         
        @* SetRandomId();
        DataSource.DataRecord = await _services.GetRecordByIdAsync(randomInt);
        await _services.CreateRecordAsync( new CRUDTransactionDTO { Name = $"Tony{GetRandomValue(100)} Random{GetRandomValue(100)}" });
        SetRandomId();
        var test = await _services.UpdateRecordAsync( new CRUDTransactionDTO { Id = randomInt, Name = $"John{GetRandomValue(100)} Adam{GetRandomValue(100)}"});
        SetRandomId(); *@

        @* var test1 = await _services.DeleteRecordAsync(randomInt); *@

        if(DataSource != null && DataSource.DataSet != null && DataSource.DataSet.Any() )
        {
            DataSource.UnsetLoading();
        }

    }


}
    